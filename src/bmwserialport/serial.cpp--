#include "serial.h"
#define CRC32_POLYNOMIAL 0xEDB88320L
unsigned long CRC32Value(int i)
{
	unsigned long ulCRC = i;
	for (int j = 8; j > 0; j--)
	{
		if (ulCRC & 1)
		{
			ulCRC = (ulCRC >> 1) ^ CRC32_POLYNOMIAL;
		}
		else
		{
			ulCRC >>= 1;
		}
	}
	return ulCRC;
}

unsigned long CalculateBlockCRC32(
	unsigned long ulCount, /* Number of bytes in the data block */
	unsigned char *ucBuffer) /* Data block */
{
	unsigned long ulTemp1;
	unsigned long ulTemp2;
	unsigned long ulCRC = 0;

	while (ulCount-- != 0)
	{
		ulTemp1 = (ulCRC >> 8) & 0x00FFFFFFL;
		ulTemp2 = CRC32Value(((int)ulCRC ^ *ucBuffer++) & 0xff);
		ulCRC = ulTemp1 ^ ulTemp2;
	}
	return(ulCRC);
}


void swap(unsigned char &base, unsigned char &ref)
{
	if (base != ref)
	{
		base ^= ref;
		ref ^= base;
		base ^= ref;
	}
}


int ConstructLogHeader(unsigned char *header, const LogMessHerderBin& headermsg)
{
	int len = 0;
	//同步位

	setbits(header, len, 8, headermsg.sync1); len += 8;
	setbits(header, len, 8, headermsg.sync2); len += 8;
	setbits(header, len, 8, headermsg.sync3); len += 8;
	//头长度
	setbits(header, len, 8, headermsg.headLen); len += 8;
	//MsgId
	setbitshort(header, len, headermsg.msgID); len += 16;
	//reserved1
	setbitu(header, len, 8, headermsg.reserved1); len += 8;
	//port
	setbitu(header, len, 8, headermsg.port); len += 8;
	//msglen
	setbitshort(header, len, headermsg.msgLen); len += 16;
	//reserved2
	setbitshort(header, len, headermsg.reserved2); len += 16;
	//reserved3
	setbitu(header, len, 8, headermsg.reserved3); len += 8;
	//reserved4
	setbitu(header, len, 8, headermsg.reserved4); len += 8;
	//gpsweek
	setbitshort(header, len, headermsg.gpsWeek); len += 16;
	//gpssow
	setbitint(header, len, headermsg.gpsSow); len += 32;
	//reserved5
	setbitint(header, len, headermsg.reserved5); len += 32;
	//reserved6
	setbitshort(header, len, headermsg.reserved6); len += 16;
	//reserved7
	setbitshort(header, len, headermsg.reserved7); len += 16;

	return len;
}


int ConstructDop(unsigned char *buffer, const LogMessHerderBin& headermsg, const LOG_DOP& podmsg)
{
	int sat_num;
	unsigned long CRC32;
	int len = ConstructLogHeader(buffer, headermsg);

	setbitf(buffer, len, podmsg.gdop); len += 32;
	
	setbitf(buffer, len, podmsg.pdop); len += 32;
	
	setbitf(buffer, len, podmsg.hdop); len += 32;
	
	setbitf(buffer, len, podmsg.htdop); len += 32;
	
	setbitf(buffer, len, podmsg.tdop); len += 32;
	
	setbitf(buffer, len, podmsg.elev_mask); len += 32;
	
	setbitu_r(buffer, len, 32, podmsg.nsats); len += 32;

	for (sat_num = 0 ; sat_num < podmsg.nsats ; sat_num++)
	{
		setbitu_r(buffer, len, 32, podmsg.cal_sats[sat_num]); 
		len += 32;
	}

	CRC32 = CalculateBlockCRC32(len, buffer);
	setbitint(buffer, len, CRC32); len += 32;

	return len/8;
}


int ConstructTraceBack(unsigned char *buf, const LogMessHerderBin& hdmsg, const LOG_TRACKSTAT& tbmsg)
{
	int len = ConstructLogHeader(buf, hdmsg);




	unsigned long CRC32 = CalculateBlockCRC32(len, buf);
	len += 4;

	return len;
}


int ConstructBestPos(unsigned char *buf, const LogMessHerderBin& hdmsg, const LOG_BESTPOS& bposmsg)
{
	int len = ConstructLogHeader(buf, hdmsg);




	unsigned long CRC32 = CalculateBlockCRC32(len, buf);
	len += 4;

	return len;
}


int ConstructBestSat(unsigned char *buf, const LogMessHerderBin& hdmsg, const BEST_SAT& bsatmsg)
{
	int len = ConstructLogHeader(buf, hdmsg);




	unsigned long CRC32 = CalculateBlockCRC32(len, buf);
	len += 4;

	return len;
}


int ConstructBestSats(unsigned char *buf, const LogMessHerderBin& hdmsg, const LOG_BESTSAT& bsatmsg)
{
	int len = ConstructLogHeader(buf, hdmsg);




	unsigned long CRC32 = CalculateBlockCRC32(len, buf);
	len += 4;

	return len;
}


int ConstructSatVis2(unsigned char *buf, const LogMessHerderBin& hdmsg, const LOG_SATVIS2& bsatmsg)
{
	int len = ConstructLogHeader(buf, hdmsg);




	unsigned long CRC32 = CalculateBlockCRC32(len, buf);
	len += 4;

	return len;
}



/* set sign-magnitude bits ---------------------------------------------------*/
void setbitg(unsigned char *buff, int pos, int len, int value)
{
	setbitu(buff, pos, 1, value < 0 ? 1 : 0);
	setbitu(buff, pos + 1, len - 1, value < 0 ? -value : value);
}



void setbitf(unsigned char *buff, int pos, const float num)
{
	Float2Bin num_float;
	num_float.float_num = num;
	memcpy(buff + pos / 8, num_float.char_num, 4);
}


void setbitint(unsigned char *buff, int pos, const int num)
{
	INT2Bin num_int;
	num_int.int_num = num;
	memcpy(buff + pos / 8, num_int.char_num, 4);
}


void setbitshort(unsigned char *buff, int pos, const short num)
{
	SHORT2Bin num_short;
	num_short.int_num = num;
	memcpy(buff + pos / 8, num_short.char_num, 2);
}

/* set unsigned/signed bits ----------------------------------------------------
* set unsigned/signed bits to byte data
* args   : unsigned char *buff IO byte data
*          int    pos    I      bit position from start of data (bits)
*          int    len    I      bit length (bits) (len<=32)
*         (unsigned) int I      unsigned/signed data
* return : none
*-----------------------------------------------------------------------------*/
void setbitu(unsigned char *buff, int pos, int len, unsigned int data)
{
	unsigned int mask = 1u << (len - 1);
	int i;
	if (len <= 0 || 32 < len) 
		return;
	for (i = pos; i < pos + len; i++, mask >>= 1) 
	{
		if (data&mask)
			buff[i / 8] |= 1u << (7 - i % 8);
		else
			buff[i / 8] &= ~(1u << (7 - i % 8));
	}
}



void setbitu_r(unsigned char *buff, int pos, int len, unsigned int data)
{
	setbitu(buff, pos, len, data);
	reversal(buff, pos + len, len);
}

void reversal(unsigned char *buff,int pos,int len)
{
	int i = 0;
	int inputlen = len / 8;
	int bufflen = pos / 8;
	if (inputlen > 1)
	{
		for (i = 1; i <= inputlen / 2; i++)
		{
			swap(buff[bufflen - i], buff[bufflen - inputlen]);
			inputlen--;
		}
	}
}



void setbits(unsigned char *buff, int pos, int len, int data)
{
	if (data < 0)
		data |= 1 << (len - 1);
	else
		data &= ~(1 << (len - 1)); /* set sign bit */
	setbitu(buff, pos, len, (unsigned int)data);
}
 


/**********************************************/

 int getbitu(const unsigned char *buff, int pos, int len)
{
	unsigned int bits = 0;
	int i;
	for (i = pos; i < pos + len; i++) bits = (bits << 1) + ((buff[i / 8] >> (7 - i % 8)) & 1u);
	return bits;
}